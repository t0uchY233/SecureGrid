version: '3.8'

services:
  # Сервис с Node.js приложением
  app:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    restart: unless-stopped
    ports:
      - "5000:5000"
    depends_on:
      - db
    environment:
      - NODE_ENV=production
      - PORT=5000
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=securegrid
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - JWT_SECRET=your_production_secret_key_here
      - JWT_EXPIRE=24h
    volumes:
      - app_logs:/app/logs
    networks:
      - app_network

  # Фронтенд в режиме разработки (опционально)
  client:
    image: node:16-alpine
    command: sh -c "cd /app && npm install && npm start"
    ports:
      - "3000:3000"
    volumes:
      - ../client:/app
    environment:
      - REACT_APP_API_URL=http://localhost:5000/api
      - REACT_APP_SOCKET_URL=http://localhost:5000
      - CHOKIDAR_USEPOLLING=true
    networks:
      - app_network

  # База данных PostgreSQL
  db:
    image: postgres:14-alpine
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=securegrid
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app_network

  # Инструмент администрирования для PostgreSQL
  adminer:
    image: adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    networks:
      - app_network
    depends_on:
      - db

volumes:
  postgres_data:
  app_logs:

networks:
  app_network:
    driver: bridge